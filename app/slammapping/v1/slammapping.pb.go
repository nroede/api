// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: app/slammapping/v1/slammapping.proto

package v1

import (
	v1 "go.viam.com/api/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StartMappingSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// How many trajectory nodes are inserted before the global optimization is run.
	OptimizeEveryNNodes float64 `protobuf:"fixed64,2,opt,name=optimize_every_n_nodes,json=optimizeEveryNNodes,proto3" json:"optimize_every_n_nodes,omitempty"`
	// Number of measurements in each submap.
	NumRangeData float64 `protobuf:"fixed64,3,opt,name=num_range_data,json=numRangeData,proto3" json:"num_range_data,omitempty"`
	// Replaces the length of ranges that are further than max_range with this value.
	MissingDataRayLength float64 `protobuf:"fixed64,4,opt,name=missing_data_ray_length,json=missingDataRayLength,proto3" json:"missing_data_ray_length,omitempty"`
	// Maximum range of valid measurements.
	MaxRange float64 `protobuf:"fixed64,5,opt,name=max_range,json=maxRange,proto3" json:"max_range,omitempty"`
	// Minimum range of valid measurements.
	MinRange float64 `protobuf:"fixed64,6,opt,name=min_range,json=minRange,proto3" json:"min_range,omitempty"`
	// Number of submaps to use and track for localization.
	MaxSubmapsToKeep float64 `protobuf:"fixed64,7,opt,name=max_submaps_to_keep,json=maxSubmapsToKeep,proto3" json:"max_submaps_to_keep,omitempty"`
	// Length of submap history considered when running SLAM in updating mode.
	FreshSubmapsCount float64 `protobuf:"fixed64,8,opt,name=fresh_submaps_count,json=freshSubmapsCount,proto3" json:"fresh_submaps_count,omitempty"`
	// The minimum overlapping area, in square meters, for an old submap to be considered for deletion.
	MinCoveredArea float64 `protobuf:"fixed64,9,opt,name=min_covered_area,json=minCoveredArea,proto3" json:"min_covered_area,omitempty"`
	// The minimum number of added submaps before deletion of the old submap is considered.
	MinAddedSubmapsCount float64 `protobuf:"fixed64,10,opt,name=min_added_submaps_count,json=minAddedSubmapsCount,proto3" json:"min_added_submaps_count,omitempty"`
	// Emphasis to put on scanned data points between measurements.
	OccupiedSpaceWeight float64 `protobuf:"fixed64,11,opt,name=occupied_space_weight,json=occupiedSpaceWeight,proto3" json:"occupied_space_weight,omitempty"`
	// Emphasis to put on expected translational change from pose extrapolator data between measurements.
	TranslationWeight float64 `protobuf:"fixed64,12,opt,name=translation_weight,json=translationWeight,proto3" json:"translation_weight,omitempty"`
	// Emphasis to put on expected rotational change from pose extrapolator data between measurements.
	RotationWeight float64 `protobuf:"fixed64,13,opt,name=rotation_weight,json=rotationWeight,proto3" json:"rotation_weight,omitempty"`
}

func (x *StartMappingSessionRequest) Reset() {
	*x = StartMappingSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_slammapping_v1_slammapping_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartMappingSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartMappingSessionRequest) ProtoMessage() {}

func (x *StartMappingSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_app_slammapping_v1_slammapping_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartMappingSessionRequest.ProtoReflect.Descriptor instead.
func (*StartMappingSessionRequest) Descriptor() ([]byte, []int) {
	return file_app_slammapping_v1_slammapping_proto_rawDescGZIP(), []int{0}
}

func (x *StartMappingSessionRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *StartMappingSessionRequest) GetOptimizeEveryNNodes() float64 {
	if x != nil {
		return x.OptimizeEveryNNodes
	}
	return 0
}

func (x *StartMappingSessionRequest) GetNumRangeData() float64 {
	if x != nil {
		return x.NumRangeData
	}
	return 0
}

func (x *StartMappingSessionRequest) GetMissingDataRayLength() float64 {
	if x != nil {
		return x.MissingDataRayLength
	}
	return 0
}

func (x *StartMappingSessionRequest) GetMaxRange() float64 {
	if x != nil {
		return x.MaxRange
	}
	return 0
}

func (x *StartMappingSessionRequest) GetMinRange() float64 {
	if x != nil {
		return x.MinRange
	}
	return 0
}

func (x *StartMappingSessionRequest) GetMaxSubmapsToKeep() float64 {
	if x != nil {
		return x.MaxSubmapsToKeep
	}
	return 0
}

func (x *StartMappingSessionRequest) GetFreshSubmapsCount() float64 {
	if x != nil {
		return x.FreshSubmapsCount
	}
	return 0
}

func (x *StartMappingSessionRequest) GetMinCoveredArea() float64 {
	if x != nil {
		return x.MinCoveredArea
	}
	return 0
}

func (x *StartMappingSessionRequest) GetMinAddedSubmapsCount() float64 {
	if x != nil {
		return x.MinAddedSubmapsCount
	}
	return 0
}

func (x *StartMappingSessionRequest) GetOccupiedSpaceWeight() float64 {
	if x != nil {
		return x.OccupiedSpaceWeight
	}
	return 0
}

func (x *StartMappingSessionRequest) GetTranslationWeight() float64 {
	if x != nil {
		return x.TranslationWeight
	}
	return 0
}

func (x *StartMappingSessionRequest) GetRotationWeight() float64 {
	if x != nil {
		return x.RotationWeight
	}
	return 0
}

type StartMappingSessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StartMappingSessionResponse) Reset() {
	*x = StartMappingSessionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_slammapping_v1_slammapping_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartMappingSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartMappingSessionResponse) ProtoMessage() {}

func (x *StartMappingSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_app_slammapping_v1_slammapping_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartMappingSessionResponse.ProtoReflect.Descriptor instead.
func (*StartMappingSessionResponse) Descriptor() ([]byte, []int) {
	return file_app_slammapping_v1_slammapping_proto_rawDescGZIP(), []int{1}
}

type GetMappingSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetMappingSessionRequest) Reset() {
	*x = GetMappingSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_slammapping_v1_slammapping_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMappingSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMappingSessionRequest) ProtoMessage() {}

func (x *GetMappingSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_app_slammapping_v1_slammapping_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMappingSessionRequest.ProtoReflect.Descriptor instead.
func (*GetMappingSessionRequest) Descriptor() ([]byte, []int) {
	return file_app_slammapping_v1_slammapping_proto_rawDescGZIP(), []int{2}
}

func (x *GetMappingSessionRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetMappingSessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PointCloud []byte `protobuf:"bytes,1,opt,name=point_cloud,json=pointCloud,proto3" json:"point_cloud,omitempty"`
	// Current position of the specified component in the SLAM Map
	Pose *v1.Pose `protobuf:"bytes,2,opt,name=pose,proto3" json:"pose,omitempty"`
}

func (x *GetMappingSessionResponse) Reset() {
	*x = GetMappingSessionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_slammapping_v1_slammapping_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMappingSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMappingSessionResponse) ProtoMessage() {}

func (x *GetMappingSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_app_slammapping_v1_slammapping_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMappingSessionResponse.ProtoReflect.Descriptor instead.
func (*GetMappingSessionResponse) Descriptor() ([]byte, []int) {
	return file_app_slammapping_v1_slammapping_proto_rawDescGZIP(), []int{3}
}

func (x *GetMappingSessionResponse) GetPointCloud() []byte {
	if x != nil {
		return x.PointCloud
	}
	return nil
}

func (x *GetMappingSessionResponse) GetPose() *v1.Pose {
	if x != nil {
		return x.Pose
	}
	return nil
}

var File_app_slammapping_v1_slammapping_proto protoreflect.FileDescriptor

var file_app_slammapping_v1_slammapping_proto_rawDesc = []byte{
	0x0a, 0x24, 0x61, 0x70, 0x70, 0x2f, 0x73, 0x6c, 0x61, 0x6d, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x6c, 0x61, 0x6d, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70,
	0x2e, 0x73, 0x6c, 0x61, 0x6d, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x1a,
	0x16, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc4, 0x04, 0x0a, 0x1a, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69,
	0x7a, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x6e, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65,
	0x45, 0x76, 0x65, 0x72, 0x79, 0x4e, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x6e,
	0x75, 0x6d, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0c, 0x6e, 0x75, 0x6d, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x35, 0x0a, 0x17, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x72, 0x61, 0x79, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x14, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x61, 0x79, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6d, 0x61, 0x78,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x2d, 0x0a, 0x13, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x75, 0x62, 0x6d, 0x61, 0x70,
	0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x6b, 0x65, 0x65, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x10, 0x6d, 0x61, 0x78, 0x53, 0x75, 0x62, 0x6d, 0x61, 0x70, 0x73, 0x54, 0x6f, 0x4b, 0x65, 0x65,
	0x70, 0x12, 0x2e, 0x0a, 0x13, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x73, 0x75, 0x62, 0x6d, 0x61,
	0x70, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x53, 0x75, 0x62, 0x6d, 0x61, 0x70, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64,
	0x5f, 0x61, 0x72, 0x65, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x6d, 0x69, 0x6e,
	0x43, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x41, 0x72, 0x65, 0x61, 0x12, 0x35, 0x0a, 0x17, 0x6d,
	0x69, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x65, 0x64, 0x5f, 0x73, 0x75, 0x62, 0x6d, 0x61, 0x70, 0x73,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x6d, 0x69,
	0x6e, 0x41, 0x64, 0x64, 0x65, 0x64, 0x53, 0x75, 0x62, 0x6d, 0x61, 0x70, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x69, 0x65, 0x64, 0x5f, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x13, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x69, 0x65, 0x64, 0x53, 0x70, 0x61, 0x63, 0x65,
	0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e,
	0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x1d,
	0x0a, 0x1b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0x0a,
	0x18, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x66, 0x0a, 0x19, 0x47, 0x65, 0x74,
	0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x12, 0x28, 0x0a, 0x04, 0x70, 0x6f, 0x73, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x65, 0x52, 0x04, 0x70, 0x6f, 0x73,
	0x65, 0x32, 0x95, 0x02, 0x0a, 0x12, 0x53, 0x4c, 0x41, 0x4d, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x13, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x33, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x6c, 0x61, 0x6d,
	0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70,
	0x2e, 0x73, 0x6c, 0x61, 0x6d, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7c, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x31, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73, 0x6c, 0x61, 0x6d,
	0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x73,
	0x6c, 0x61, 0x6d, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x42, 0x24, 0x5a, 0x22, 0x67, 0x6f, 0x2e,
	0x76, 0x69, 0x61, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x70,
	0x2f, 0x73, 0x6c, 0x61, 0x6d, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_app_slammapping_v1_slammapping_proto_rawDescOnce sync.Once
	file_app_slammapping_v1_slammapping_proto_rawDescData = file_app_slammapping_v1_slammapping_proto_rawDesc
)

func file_app_slammapping_v1_slammapping_proto_rawDescGZIP() []byte {
	file_app_slammapping_v1_slammapping_proto_rawDescOnce.Do(func() {
		file_app_slammapping_v1_slammapping_proto_rawDescData = protoimpl.X.CompressGZIP(file_app_slammapping_v1_slammapping_proto_rawDescData)
	})
	return file_app_slammapping_v1_slammapping_proto_rawDescData
}

var file_app_slammapping_v1_slammapping_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_app_slammapping_v1_slammapping_proto_goTypes = []interface{}{
	(*StartMappingSessionRequest)(nil),  // 0: viam.app.slammapping.v1.StartMappingSessionRequest
	(*StartMappingSessionResponse)(nil), // 1: viam.app.slammapping.v1.StartMappingSessionResponse
	(*GetMappingSessionRequest)(nil),    // 2: viam.app.slammapping.v1.GetMappingSessionRequest
	(*GetMappingSessionResponse)(nil),   // 3: viam.app.slammapping.v1.GetMappingSessionResponse
	(*v1.Pose)(nil),                     // 4: viam.common.v1.Pose
}
var file_app_slammapping_v1_slammapping_proto_depIdxs = []int32{
	4, // 0: viam.app.slammapping.v1.GetMappingSessionResponse.pose:type_name -> viam.common.v1.Pose
	0, // 1: viam.app.slammapping.v1.SLAMMappingService.StartMappingSession:input_type -> viam.app.slammapping.v1.StartMappingSessionRequest
	2, // 2: viam.app.slammapping.v1.SLAMMappingService.GetMappingSession:input_type -> viam.app.slammapping.v1.GetMappingSessionRequest
	1, // 3: viam.app.slammapping.v1.SLAMMappingService.StartMappingSession:output_type -> viam.app.slammapping.v1.StartMappingSessionResponse
	3, // 4: viam.app.slammapping.v1.SLAMMappingService.GetMappingSession:output_type -> viam.app.slammapping.v1.GetMappingSessionResponse
	3, // [3:5] is the sub-list for method output_type
	1, // [1:3] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_app_slammapping_v1_slammapping_proto_init() }
func file_app_slammapping_v1_slammapping_proto_init() {
	if File_app_slammapping_v1_slammapping_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_app_slammapping_v1_slammapping_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartMappingSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_slammapping_v1_slammapping_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartMappingSessionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_slammapping_v1_slammapping_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMappingSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_slammapping_v1_slammapping_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMappingSessionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_app_slammapping_v1_slammapping_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_app_slammapping_v1_slammapping_proto_goTypes,
		DependencyIndexes: file_app_slammapping_v1_slammapping_proto_depIdxs,
		MessageInfos:      file_app_slammapping_v1_slammapping_proto_msgTypes,
	}.Build()
	File_app_slammapping_v1_slammapping_proto = out.File
	file_app_slammapping_v1_slammapping_proto_rawDesc = nil
	file_app_slammapping_v1_slammapping_proto_goTypes = nil
	file_app_slammapping_v1_slammapping_proto_depIdxs = nil
}
