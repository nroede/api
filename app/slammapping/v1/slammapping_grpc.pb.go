// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: app/slammapping/v1/slammapping.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SLAMMappingServiceClient is the client API for SLAMMappingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SLAMMappingServiceClient interface {
	StartMappingSession(ctx context.Context, in *StartMappingSessionRequest, opts ...grpc.CallOption) (*StartMappingSessionResponse, error)
	GetMappingSession(ctx context.Context, in *GetMappingSessionRequest, opts ...grpc.CallOption) (SLAMMappingService_GetMappingSessionClient, error)
}

type sLAMMappingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSLAMMappingServiceClient(cc grpc.ClientConnInterface) SLAMMappingServiceClient {
	return &sLAMMappingServiceClient{cc}
}

func (c *sLAMMappingServiceClient) StartMappingSession(ctx context.Context, in *StartMappingSessionRequest, opts ...grpc.CallOption) (*StartMappingSessionResponse, error) {
	out := new(StartMappingSessionResponse)
	err := c.cc.Invoke(ctx, "/viam.app.slammapping.v1.SLAMMappingService/StartMappingSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sLAMMappingServiceClient) GetMappingSession(ctx context.Context, in *GetMappingSessionRequest, opts ...grpc.CallOption) (SLAMMappingService_GetMappingSessionClient, error) {
	stream, err := c.cc.NewStream(ctx, &SLAMMappingService_ServiceDesc.Streams[0], "/viam.app.slammapping.v1.SLAMMappingService/GetMappingSession", opts...)
	if err != nil {
		return nil, err
	}
	x := &sLAMMappingServiceGetMappingSessionClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SLAMMappingService_GetMappingSessionClient interface {
	Recv() (*GetMappingSessionResponse, error)
	grpc.ClientStream
}

type sLAMMappingServiceGetMappingSessionClient struct {
	grpc.ClientStream
}

func (x *sLAMMappingServiceGetMappingSessionClient) Recv() (*GetMappingSessionResponse, error) {
	m := new(GetMappingSessionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SLAMMappingServiceServer is the server API for SLAMMappingService service.
// All implementations must embed UnimplementedSLAMMappingServiceServer
// for forward compatibility
type SLAMMappingServiceServer interface {
	StartMappingSession(context.Context, *StartMappingSessionRequest) (*StartMappingSessionResponse, error)
	GetMappingSession(*GetMappingSessionRequest, SLAMMappingService_GetMappingSessionServer) error
	mustEmbedUnimplementedSLAMMappingServiceServer()
}

// UnimplementedSLAMMappingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSLAMMappingServiceServer struct {
}

func (UnimplementedSLAMMappingServiceServer) StartMappingSession(context.Context, *StartMappingSessionRequest) (*StartMappingSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartMappingSession not implemented")
}
func (UnimplementedSLAMMappingServiceServer) GetMappingSession(*GetMappingSessionRequest, SLAMMappingService_GetMappingSessionServer) error {
	return status.Errorf(codes.Unimplemented, "method GetMappingSession not implemented")
}
func (UnimplementedSLAMMappingServiceServer) mustEmbedUnimplementedSLAMMappingServiceServer() {}

// UnsafeSLAMMappingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SLAMMappingServiceServer will
// result in compilation errors.
type UnsafeSLAMMappingServiceServer interface {
	mustEmbedUnimplementedSLAMMappingServiceServer()
}

func RegisterSLAMMappingServiceServer(s grpc.ServiceRegistrar, srv SLAMMappingServiceServer) {
	s.RegisterService(&SLAMMappingService_ServiceDesc, srv)
}

func _SLAMMappingService_StartMappingSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartMappingSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SLAMMappingServiceServer).StartMappingSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.app.slammapping.v1.SLAMMappingService/StartMappingSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SLAMMappingServiceServer).StartMappingSession(ctx, req.(*StartMappingSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SLAMMappingService_GetMappingSession_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetMappingSessionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SLAMMappingServiceServer).GetMappingSession(m, &sLAMMappingServiceGetMappingSessionServer{stream})
}

type SLAMMappingService_GetMappingSessionServer interface {
	Send(*GetMappingSessionResponse) error
	grpc.ServerStream
}

type sLAMMappingServiceGetMappingSessionServer struct {
	grpc.ServerStream
}

func (x *sLAMMappingServiceGetMappingSessionServer) Send(m *GetMappingSessionResponse) error {
	return x.ServerStream.SendMsg(m)
}

// SLAMMappingService_ServiceDesc is the grpc.ServiceDesc for SLAMMappingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SLAMMappingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "viam.app.slammapping.v1.SLAMMappingService",
	HandlerType: (*SLAMMappingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartMappingSession",
			Handler:    _SLAMMappingService_StartMappingSession_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetMappingSession",
			Handler:       _SLAMMappingService_GetMappingSession_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "app/slammapping/v1/slammapping.proto",
}
