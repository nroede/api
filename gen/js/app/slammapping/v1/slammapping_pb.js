// source: app/slammapping/v1/slammapping.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

var common_v1_common_pb = require('../../../common/v1/common_pb.js');
goog.object.extend(proto, common_v1_common_pb);
goog.exportSymbol('proto.viam.app.slammapping.v1.GetMappingSessionRequest', null, global);
goog.exportSymbol('proto.viam.app.slammapping.v1.GetMappingSessionResponse', null, global);
goog.exportSymbol('proto.viam.app.slammapping.v1.StartMappingSessionRequest', null, global);
goog.exportSymbol('proto.viam.app.slammapping.v1.StartMappingSessionResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.viam.app.slammapping.v1.StartMappingSessionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.viam.app.slammapping.v1.StartMappingSessionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.viam.app.slammapping.v1.StartMappingSessionRequest.displayName = 'proto.viam.app.slammapping.v1.StartMappingSessionRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.viam.app.slammapping.v1.StartMappingSessionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.viam.app.slammapping.v1.StartMappingSessionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.viam.app.slammapping.v1.StartMappingSessionResponse.displayName = 'proto.viam.app.slammapping.v1.StartMappingSessionResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.viam.app.slammapping.v1.GetMappingSessionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.viam.app.slammapping.v1.GetMappingSessionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.viam.app.slammapping.v1.GetMappingSessionRequest.displayName = 'proto.viam.app.slammapping.v1.GetMappingSessionRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.viam.app.slammapping.v1.GetMappingSessionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.viam.app.slammapping.v1.GetMappingSessionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.viam.app.slammapping.v1.GetMappingSessionResponse.displayName = 'proto.viam.app.slammapping.v1.GetMappingSessionResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.viam.app.slammapping.v1.StartMappingSessionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.viam.app.slammapping.v1.StartMappingSessionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.viam.app.slammapping.v1.StartMappingSessionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.app.slammapping.v1.StartMappingSessionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    optimizeEveryNNodes: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    numRangeData: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    missingDataRayLength: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    maxRange: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    minRange: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    maxSubmapsToKeep: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0),
    freshSubmapsCount: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, 0.0),
    minCoveredArea: jspb.Message.getFloatingPointFieldWithDefault(msg, 9, 0.0),
    minAddedSubmapsCount: jspb.Message.getFloatingPointFieldWithDefault(msg, 10, 0.0),
    occupiedSpaceWeight: jspb.Message.getFloatingPointFieldWithDefault(msg, 11, 0.0),
    translationWeight: jspb.Message.getFloatingPointFieldWithDefault(msg, 12, 0.0),
    rotationWeight: jspb.Message.getFloatingPointFieldWithDefault(msg, 13, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.viam.app.slammapping.v1.StartMappingSessionRequest}
 */
proto.viam.app.slammapping.v1.StartMappingSessionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.viam.app.slammapping.v1.StartMappingSessionRequest;
  return proto.viam.app.slammapping.v1.StartMappingSessionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.viam.app.slammapping.v1.StartMappingSessionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.viam.app.slammapping.v1.StartMappingSessionRequest}
 */
proto.viam.app.slammapping.v1.StartMappingSessionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setOptimizeEveryNNodes(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setNumRangeData(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMissingDataRayLength(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaxRange(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMinRange(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaxSubmapsToKeep(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setFreshSubmapsCount(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMinCoveredArea(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMinAddedSubmapsCount(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setOccupiedSpaceWeight(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTranslationWeight(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setRotationWeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.viam.app.slammapping.v1.StartMappingSessionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.viam.app.slammapping.v1.StartMappingSessionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.viam.app.slammapping.v1.StartMappingSessionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.app.slammapping.v1.StartMappingSessionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOptimizeEveryNNodes();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getNumRangeData();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getMissingDataRayLength();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getMaxRange();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = message.getMinRange();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = message.getMaxSubmapsToKeep();
  if (f !== 0.0) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = message.getFreshSubmapsCount();
  if (f !== 0.0) {
    writer.writeDouble(
      8,
      f
    );
  }
  f = message.getMinCoveredArea();
  if (f !== 0.0) {
    writer.writeDouble(
      9,
      f
    );
  }
  f = message.getMinAddedSubmapsCount();
  if (f !== 0.0) {
    writer.writeDouble(
      10,
      f
    );
  }
  f = message.getOccupiedSpaceWeight();
  if (f !== 0.0) {
    writer.writeDouble(
      11,
      f
    );
  }
  f = message.getTranslationWeight();
  if (f !== 0.0) {
    writer.writeDouble(
      12,
      f
    );
  }
  f = message.getRotationWeight();
  if (f !== 0.0) {
    writer.writeDouble(
      13,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.viam.app.slammapping.v1.StartMappingSessionRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.viam.app.slammapping.v1.StartMappingSessionRequest} returns this
 */
proto.viam.app.slammapping.v1.StartMappingSessionRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional double optimize_every_n_nodes = 2;
 * @return {number}
 */
proto.viam.app.slammapping.v1.StartMappingSessionRequest.prototype.getOptimizeEveryNNodes = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.viam.app.slammapping.v1.StartMappingSessionRequest} returns this
 */
proto.viam.app.slammapping.v1.StartMappingSessionRequest.prototype.setOptimizeEveryNNodes = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional double num_range_data = 3;
 * @return {number}
 */
proto.viam.app.slammapping.v1.StartMappingSessionRequest.prototype.getNumRangeData = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.viam.app.slammapping.v1.StartMappingSessionRequest} returns this
 */
proto.viam.app.slammapping.v1.StartMappingSessionRequest.prototype.setNumRangeData = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional double missing_data_ray_length = 4;
 * @return {number}
 */
proto.viam.app.slammapping.v1.StartMappingSessionRequest.prototype.getMissingDataRayLength = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.viam.app.slammapping.v1.StartMappingSessionRequest} returns this
 */
proto.viam.app.slammapping.v1.StartMappingSessionRequest.prototype.setMissingDataRayLength = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional double max_range = 5;
 * @return {number}
 */
proto.viam.app.slammapping.v1.StartMappingSessionRequest.prototype.getMaxRange = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.viam.app.slammapping.v1.StartMappingSessionRequest} returns this
 */
proto.viam.app.slammapping.v1.StartMappingSessionRequest.prototype.setMaxRange = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional double min_range = 6;
 * @return {number}
 */
proto.viam.app.slammapping.v1.StartMappingSessionRequest.prototype.getMinRange = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.viam.app.slammapping.v1.StartMappingSessionRequest} returns this
 */
proto.viam.app.slammapping.v1.StartMappingSessionRequest.prototype.setMinRange = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional double max_submaps_to_keep = 7;
 * @return {number}
 */
proto.viam.app.slammapping.v1.StartMappingSessionRequest.prototype.getMaxSubmapsToKeep = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.viam.app.slammapping.v1.StartMappingSessionRequest} returns this
 */
proto.viam.app.slammapping.v1.StartMappingSessionRequest.prototype.setMaxSubmapsToKeep = function(value) {
  return jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional double fresh_submaps_count = 8;
 * @return {number}
 */
proto.viam.app.slammapping.v1.StartMappingSessionRequest.prototype.getFreshSubmapsCount = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.viam.app.slammapping.v1.StartMappingSessionRequest} returns this
 */
proto.viam.app.slammapping.v1.StartMappingSessionRequest.prototype.setFreshSubmapsCount = function(value) {
  return jspb.Message.setProto3FloatField(this, 8, value);
};


/**
 * optional double min_covered_area = 9;
 * @return {number}
 */
proto.viam.app.slammapping.v1.StartMappingSessionRequest.prototype.getMinCoveredArea = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.viam.app.slammapping.v1.StartMappingSessionRequest} returns this
 */
proto.viam.app.slammapping.v1.StartMappingSessionRequest.prototype.setMinCoveredArea = function(value) {
  return jspb.Message.setProto3FloatField(this, 9, value);
};


/**
 * optional double min_added_submaps_count = 10;
 * @return {number}
 */
proto.viam.app.slammapping.v1.StartMappingSessionRequest.prototype.getMinAddedSubmapsCount = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 10, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.viam.app.slammapping.v1.StartMappingSessionRequest} returns this
 */
proto.viam.app.slammapping.v1.StartMappingSessionRequest.prototype.setMinAddedSubmapsCount = function(value) {
  return jspb.Message.setProto3FloatField(this, 10, value);
};


/**
 * optional double occupied_space_weight = 11;
 * @return {number}
 */
proto.viam.app.slammapping.v1.StartMappingSessionRequest.prototype.getOccupiedSpaceWeight = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 11, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.viam.app.slammapping.v1.StartMappingSessionRequest} returns this
 */
proto.viam.app.slammapping.v1.StartMappingSessionRequest.prototype.setOccupiedSpaceWeight = function(value) {
  return jspb.Message.setProto3FloatField(this, 11, value);
};


/**
 * optional double translation_weight = 12;
 * @return {number}
 */
proto.viam.app.slammapping.v1.StartMappingSessionRequest.prototype.getTranslationWeight = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 12, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.viam.app.slammapping.v1.StartMappingSessionRequest} returns this
 */
proto.viam.app.slammapping.v1.StartMappingSessionRequest.prototype.setTranslationWeight = function(value) {
  return jspb.Message.setProto3FloatField(this, 12, value);
};


/**
 * optional double rotation_weight = 13;
 * @return {number}
 */
proto.viam.app.slammapping.v1.StartMappingSessionRequest.prototype.getRotationWeight = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 13, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.viam.app.slammapping.v1.StartMappingSessionRequest} returns this
 */
proto.viam.app.slammapping.v1.StartMappingSessionRequest.prototype.setRotationWeight = function(value) {
  return jspb.Message.setProto3FloatField(this, 13, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.viam.app.slammapping.v1.StartMappingSessionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.viam.app.slammapping.v1.StartMappingSessionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.viam.app.slammapping.v1.StartMappingSessionResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.app.slammapping.v1.StartMappingSessionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.viam.app.slammapping.v1.StartMappingSessionResponse}
 */
proto.viam.app.slammapping.v1.StartMappingSessionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.viam.app.slammapping.v1.StartMappingSessionResponse;
  return proto.viam.app.slammapping.v1.StartMappingSessionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.viam.app.slammapping.v1.StartMappingSessionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.viam.app.slammapping.v1.StartMappingSessionResponse}
 */
proto.viam.app.slammapping.v1.StartMappingSessionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.viam.app.slammapping.v1.StartMappingSessionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.viam.app.slammapping.v1.StartMappingSessionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.viam.app.slammapping.v1.StartMappingSessionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.app.slammapping.v1.StartMappingSessionResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.viam.app.slammapping.v1.GetMappingSessionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.viam.app.slammapping.v1.GetMappingSessionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.viam.app.slammapping.v1.GetMappingSessionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.app.slammapping.v1.GetMappingSessionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.viam.app.slammapping.v1.GetMappingSessionRequest}
 */
proto.viam.app.slammapping.v1.GetMappingSessionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.viam.app.slammapping.v1.GetMappingSessionRequest;
  return proto.viam.app.slammapping.v1.GetMappingSessionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.viam.app.slammapping.v1.GetMappingSessionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.viam.app.slammapping.v1.GetMappingSessionRequest}
 */
proto.viam.app.slammapping.v1.GetMappingSessionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.viam.app.slammapping.v1.GetMappingSessionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.viam.app.slammapping.v1.GetMappingSessionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.viam.app.slammapping.v1.GetMappingSessionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.app.slammapping.v1.GetMappingSessionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.viam.app.slammapping.v1.GetMappingSessionRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.viam.app.slammapping.v1.GetMappingSessionRequest} returns this
 */
proto.viam.app.slammapping.v1.GetMappingSessionRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.viam.app.slammapping.v1.GetMappingSessionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.viam.app.slammapping.v1.GetMappingSessionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.viam.app.slammapping.v1.GetMappingSessionResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.app.slammapping.v1.GetMappingSessionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    pointCloud: msg.getPointCloud_asB64(),
    pose: (f = msg.getPose()) && common_v1_common_pb.Pose.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.viam.app.slammapping.v1.GetMappingSessionResponse}
 */
proto.viam.app.slammapping.v1.GetMappingSessionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.viam.app.slammapping.v1.GetMappingSessionResponse;
  return proto.viam.app.slammapping.v1.GetMappingSessionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.viam.app.slammapping.v1.GetMappingSessionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.viam.app.slammapping.v1.GetMappingSessionResponse}
 */
proto.viam.app.slammapping.v1.GetMappingSessionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPointCloud(value);
      break;
    case 2:
      var value = new common_v1_common_pb.Pose;
      reader.readMessage(value,common_v1_common_pb.Pose.deserializeBinaryFromReader);
      msg.setPose(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.viam.app.slammapping.v1.GetMappingSessionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.viam.app.slammapping.v1.GetMappingSessionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.viam.app.slammapping.v1.GetMappingSessionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.app.slammapping.v1.GetMappingSessionResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPointCloud_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getPose();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_v1_common_pb.Pose.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes point_cloud = 1;
 * @return {string}
 */
proto.viam.app.slammapping.v1.GetMappingSessionResponse.prototype.getPointCloud = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes point_cloud = 1;
 * This is a type-conversion wrapper around `getPointCloud()`
 * @return {string}
 */
proto.viam.app.slammapping.v1.GetMappingSessionResponse.prototype.getPointCloud_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPointCloud()));
};


/**
 * optional bytes point_cloud = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPointCloud()`
 * @return {!Uint8Array}
 */
proto.viam.app.slammapping.v1.GetMappingSessionResponse.prototype.getPointCloud_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPointCloud()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.viam.app.slammapping.v1.GetMappingSessionResponse} returns this
 */
proto.viam.app.slammapping.v1.GetMappingSessionResponse.prototype.setPointCloud = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional viam.common.v1.Pose pose = 2;
 * @return {?proto.viam.common.v1.Pose}
 */
proto.viam.app.slammapping.v1.GetMappingSessionResponse.prototype.getPose = function() {
  return /** @type{?proto.viam.common.v1.Pose} */ (
    jspb.Message.getWrapperField(this, common_v1_common_pb.Pose, 2));
};


/**
 * @param {?proto.viam.common.v1.Pose|undefined} value
 * @return {!proto.viam.app.slammapping.v1.GetMappingSessionResponse} returns this
*/
proto.viam.app.slammapping.v1.GetMappingSessionResponse.prototype.setPose = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.viam.app.slammapping.v1.GetMappingSessionResponse} returns this
 */
proto.viam.app.slammapping.v1.GetMappingSessionResponse.prototype.clearPose = function() {
  return this.setPose(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.viam.app.slammapping.v1.GetMappingSessionResponse.prototype.hasPose = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.viam.app.slammapping.v1);
